{
  "stats": {
    "suites": 8,
    "tests": 45,
    "passes": 38,
    "pending": 0,
    "failures": 7,
    "start": "2020-05-28T14:38:05.242Z",
    "end": "2020-05-28T14:38:05.281Z",
    "duration": 39,
    "testsRegistered": 45,
    "passPercent": 84.44444444444444,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "16d74ef0-eb9e-455c-98aa-d63aa9a8f8fa",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b3636d2f-c206-4c59-b531-0f82d44d5272",
          "title": "evolutionOf(pokeData, name) : returns all evolutions of a pokemon: ",
          "fullFile": "/home/hackyourfuture/Documents/pokedex-api/logic/evolutions-of/spec.js",
          "file": "/logic/evolutions-of/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 1, Squirtle",
              "fullTitle": "evolutionOf(pokeData, name) : returns all evolutions of a pokemon:  data sample 1, Squirtle",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = evolutionOf(dataSample1, 'Squirtle');\nconst expected = [\n  { \"num\": \"007\", \"name\": \"Squirtle\" },\n  { \"num\": \"008\", \"name\": \"Wartortle\" },\n  { \"num\": \"009\", \"name\": \"Blastoise\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "cda5bbea-f929-424e-8fd8-7191c8c056ac",
              "parentUUID": "b3636d2f-c206-4c59-b531-0f82d44d5272",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 1, Wartortle",
              "fullTitle": "evolutionOf(pokeData, name) : returns all evolutions of a pokemon:  data sample 1, Wartortle",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = evolutionOf(dataSample1, 'Wartortle');\nconst expected = [\n  { \"num\": \"007\", \"name\": \"Squirtle\" },\n  { \"num\": \"008\", \"name\": \"Wartortle\" },\n  { \"num\": \"009\", \"name\": \"Blastoise\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "e8180cbb-b9b5-4629-adea-c9fff849243f",
              "parentUUID": "b3636d2f-c206-4c59-b531-0f82d44d5272",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 1, Blastoise",
              "fullTitle": "evolutionOf(pokeData, name) : returns all evolutions of a pokemon:  data sample 1, Blastoise",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = evolutionOf(dataSample1, 'Blastoise');\nconst expected = [\n  { \"num\": \"007\", \"name\": \"Squirtle\" },\n  { \"num\": \"008\", \"name\": \"Wartortle\" },\n  { \"num\": \"009\", \"name\": \"Blastoise\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "6506b221-2b2e-4c2e-bdfd-c56692125b9d",
              "parentUUID": "b3636d2f-c206-4c59-b531-0f82d44d5272",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, DoesNotExist",
              "fullTitle": "evolutionOf(pokeData, name) : returns all evolutions of a pokemon:  data sample 3, DoesNotExist",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = evolutionOf(dataSample3, 'DoesNotExist');\nconst expected = null;\nassert.strictEqual(actual, expected);",
              "err": {},
              "uuid": "4d82ee2d-b60d-4c01-95d3-acbb10a7909b",
              "parentUUID": "b3636d2f-c206-4c59-b531-0f82d44d5272",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 5, Mew",
              "fullTitle": "evolutionOf(pokeData, name) : returns all evolutions of a pokemon:  data sample 5, Mew",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = evolutionOf(dataSample5, 'Mew');\nconst expected = [\n  { \"name\": \"Mew\", \"num\": \"151\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "5424a7f6-8bce-4538-bcd9-0c88bbbf6ece",
              "parentUUID": "b3636d2f-c206-4c59-b531-0f82d44d5272",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cda5bbea-f929-424e-8fd8-7191c8c056ac",
            "e8180cbb-b9b5-4629-adea-c9fff849243f",
            "6506b221-2b2e-4c2e-bdfd-c56692125b9d",
            "4d82ee2d-b60d-4c01-95d3-acbb10a7909b",
            "5424a7f6-8bce-4538-bcd9-0c88bbbf6ece"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "19125a22-dafd-40db-a615-bd6a18f6d183",
          "title": "findById(pokeData, id) : returns the pokemon object with the given id",
          "fullFile": "/home/hackyourfuture/Documents/pokedex-api/logic/find-by/id/spec.js",
          "file": "/logic/find-by/id/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 1, 13",
              "fullTitle": "findById(pokeData, id) : returns the pokemon object with the given id data sample 1, 13",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findById(dataSample1, 13);\nconst expected = {\n  \"id\": 13,\n  \"num\": \"013\",\n  \"name\": \"Weedle\",\n  \"img\": \"http://www.serebii.net/pokemongo/pokemon/013.png\",\n  \"type\": [\n    \"Bug\",\n    \"Poison\"\n  ],\n  \"height\": \"0.30 m\",\n  \"weight\": \"3.2 kg\",\n  \"candy\": \"Weedle Candy\",\n  \"candy_count\": 12,\n  \"egg\": \"2 km\",\n  \"spawn_chance\": 7.12,\n  \"avg_spawns\": 712,\n  \"spawn_time\": \"02:21\",\n  \"multipliers\": [\n    1.01,\n    1.09\n  ],\n  \"weaknesses\": [\n    \"Fire\",\n    \"Flying\",\n    \"Psychic\",\n    \"Rock\"\n  ],\n  \"next_evolution\": [\n    { \"num\": \"014\", \"name\": \"Kakuna\" },\n    { \"num\": \"015\", \"name\": \"Beedrill\" }\n  ]\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "e130052e-da2e-45d0-8c85-1e4353646135",
              "parentUUID": "19125a22-dafd-40db-a615-bd6a18f6d183",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 1, 16",
              "fullTitle": "findById(pokeData, id) : returns the pokemon object with the given id data sample 1, 16",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findById(dataSample1, 16);\nconst expected = null;\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "5951c88e-196a-440a-87d4-50cdf4bf12e2",
              "parentUUID": "19125a22-dafd-40db-a615-bd6a18f6d183",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, 46",
              "fullTitle": "findById(pokeData, id) : returns the pokemon object with the given id data sample 2, 46",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findById(dataSample2, 46);\nconst expected = {\n  \"id\": 46,\n  \"num\": \"046\",\n  \"name\": \"Paras\",\n  \"img\": \"http://www.serebii.net/pokemongo/pokemon/046.png\",\n  \"type\": [\n    \"Bug\",\n    \"Grass\"\n  ],\n  \"height\": \"0.30 m\",\n  \"weight\": \"5.4 kg\",\n  \"candy\": \"Paras Candy\",\n  \"candy_count\": 50,\n  \"egg\": \"5 km\",\n  \"spawn_chance\": 2.36,\n  \"avg_spawns\": 236,\n  \"spawn_time\": \"01:42\",\n  \"multipliers\": [\n    2.02\n  ],\n  \"weaknesses\": [\n    \"Fire\",\n    \"Ice\",\n    \"Poison\",\n    \"Flying\",\n    \"Bug\",\n    \"Rock\"\n  ],\n  \"next_evolution\": [\n    {\n      \"num\": \"047\",\n      \"name\": \"Parasect\"\n    }\n  ]\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "54d185a0-3bbc-493b-ab17-7b9962f1c354",
              "parentUUID": "19125a22-dafd-40db-a615-bd6a18f6d183",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, 42",
              "fullTitle": "findById(pokeData, id) : returns the pokemon object with the given id data sample 2, 42",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findById(dataSample2, 42);\nconst expected = null;\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "a18cc11c-04f7-4211-a2c8-fa86dbff469c",
              "parentUUID": "19125a22-dafd-40db-a615-bd6a18f6d183",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, 84",
              "fullTitle": "findById(pokeData, id) : returns the pokemon object with the given id data sample 3, 84",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findById(dataSample3, 84);\nconst expected = {\n  \"id\": 84,\n  \"num\": \"084\",\n  \"name\": \"Doduo\",\n  \"img\": \"http://www.serebii.net/pokemongo/pokemon/084.png\",\n  \"type\": [\n    \"Normal\",\n    \"Flying\"\n  ],\n  \"height\": \"1.40 m\",\n  \"weight\": \"39.2 kg\",\n  \"candy\": \"Doduo Candy\",\n  \"candy_count\": 50,\n  \"egg\": \"5 km\",\n  \"spawn_chance\": 0.52,\n  \"avg_spawns\": 52,\n  \"spawn_time\": \"05:10\",\n  \"multipliers\": [\n    2.19,\n    2.24\n  ],\n  \"weaknesses\": [\n    \"Electric\",\n    \"Rock\"\n  ],\n  \"next_evolution\": [\n    {\n      \"num\": \"085\",\n      \"name\": \"Dodrio\"\n    }\n  ]\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "cc87b2e6-1c56-4ecd-a3b4-ba30ba058f31",
              "parentUUID": "19125a22-dafd-40db-a615-bd6a18f6d183",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, 85",
              "fullTitle": "findById(pokeData, id) : returns the pokemon object with the given id data sample 3, 85",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findById(dataSample3, 85);\nconst expected = {\n  \"id\": 85,\n  \"num\": \"085\",\n  \"name\": \"Dodrio\",\n  \"img\": \"http://www.serebii.net/pokemongo/pokemon/085.png\",\n  \"type\": [\n    \"Normal\",\n    \"Flying\"\n  ],\n  \"height\": \"1.80 m\",\n  \"weight\": \"85.2 kg\",\n  \"candy\": \"Doduo Candy\",\n  \"egg\": \"Not in Eggs\",\n  \"spawn_chance\": 0.22,\n  \"avg_spawns\": 22,\n  \"spawn_time\": \"02:12\",\n  \"multipliers\": null,\n  \"weaknesses\": [\n    \"Electric\",\n    \"Rock\"\n  ],\n  \"prev_evolution\": [\n    {\n      \"num\": \"084\",\n      \"name\": \"Doduo\"\n    }\n  ]\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "6266f3c7-2997-4771-af42-6f153a28cbfc",
              "parentUUID": "19125a22-dafd-40db-a615-bd6a18f6d183",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e130052e-da2e-45d0-8c85-1e4353646135",
            "5951c88e-196a-440a-87d4-50cdf4bf12e2",
            "54d185a0-3bbc-493b-ab17-7b9962f1c354",
            "a18cc11c-04f7-4211-a2c8-fa86dbff469c",
            "cc87b2e6-1c56-4ecd-a3b4-ba30ba058f31",
            "6266f3c7-2997-4771-af42-6f153a28cbfc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "68e7352a-fd16-46b5-8bce-39f485e32771",
          "title": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair",
          "fullFile": "/home/hackyourfuture/Documents/pokedex-api/logic/find-by/key-value/spec.js",
          "file": "/logic/find-by/key-value/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 1, name, Weedle",
              "fullTitle": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair data sample 1, name, Weedle",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByKeyValue(dataSample1, 'name', 'Weedle');\nconst expected = [\n  { \"num\": \"013\", \"name\": \"Weedle\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "483c5fb3-1418-44e9-9531-182a2d2478da",
              "parentUUID": "68e7352a-fd16-46b5-8bce-39f485e32771",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 1, id, 12",
              "fullTitle": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair data sample 1, id, 12",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByKeyValue(dataSample1, 'id', \"12\");\nconst expected = [\n  { \"num\": \"012\", \"name\": \"Butterfree\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "10c1a687-4ee2-4b25-84c0-8d96dcd31f53",
              "parentUUID": "68e7352a-fd16-46b5-8bce-39f485e32771",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, doesNotExist, hi!",
              "fullTitle": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair data sample 2, doesNotExist, hi!",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByKeyValue(dataSample2, 'doesNotExist', 'hi!');\nconst expected = null;\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "3104a4f4-0ee6-464e-a50a-2536726fa259",
              "parentUUID": "68e7352a-fd16-46b5-8bce-39f485e32771",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, name, Mew",
              "fullTitle": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair data sample 2, name, Mew",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByKeyValue(dataSample2, 'name', 'Mew');\nconst expected = null;\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "8932db78-ba9b-4c10-bbe0-997a93875cf2",
              "parentUUID": "68e7352a-fd16-46b5-8bce-39f485e32771",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, egg, Not in Eggs",
              "fullTitle": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair data sample 3, egg, Not in Eggs",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByKeyValue(dataSample3, 'egg', 'Not in Eggs');\nconst expected = [\n  { \"num\": \"085\", \"name\": \"Dodrio\" },\n  { \"num\": \"087\", \"name\": \"Dewgong\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "7de35191-1db4-485c-9352-f7728354d41d",
              "parentUUID": "68e7352a-fd16-46b5-8bce-39f485e32771",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, egg, 5 km",
              "fullTitle": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair data sample 3, egg, 5 km",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByKeyValue(dataSample3, 'egg', '5 km');\nconst expected = [\n  { \"num\": \"083\", \"name\": \"Farfetch'd\" },\n  { \"num\": \"084\", \"name\": \"Doduo\" },\n  { \"num\": \"086\", \"name\": \"Seel\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "59b0f0fd-3fbd-48e9-bfa2-0420b5076169",
              "parentUUID": "68e7352a-fd16-46b5-8bce-39f485e32771",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, spawn_time, N/A",
              "fullTitle": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair data sample 4, spawn_time, N/A",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByKeyValue(dataSample4, 'spawn_time', 'N/A');\nconst expected = [\n  { \"num\": \"132\", \"name\": \"Ditto\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "50962587-0532-4a84-9222-5a84b35173c5",
              "parentUUID": "68e7352a-fd16-46b5-8bce-39f485e32771",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "483c5fb3-1418-44e9-9531-182a2d2478da",
            "10c1a687-4ee2-4b25-84c0-8d96dcd31f53",
            "3104a4f4-0ee6-464e-a50a-2536726fa259",
            "8932db78-ba9b-4c10-bbe0-997a93875cf2",
            "7de35191-1db4-485c-9352-f7728354d41d",
            "59b0f0fd-3fbd-48e9-bfa2-0420b5076169",
            "50962587-0532-4a84-9222-5a84b35173c5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4c1af3cb-7276-4968-9ec4-81894f8bb842",
          "title": "findByType(pokeData, type) : returns the name and number of all pokemon with this type",
          "fullFile": "/home/hackyourfuture/Documents/pokedex-api/logic/find-by/type/spec.js",
          "file": "/logic/find-by/type/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 1, Bug",
              "fullTitle": "findByType(pokeData, type) : returns the name and number of all pokemon with this type data sample 1, Bug",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByType(dataSample1, 'Bug');\nconst expected = [\n  { name: 'Caterpie', num: '010' },\n  { name: 'Metapod', num: '011' },\n  { name: 'Butterfree', num: '012' },\n  { name: 'Weedle', num: '013' },\n  { name: 'Kakuna', num: '014' },\n  { name: 'Beedrill', num: '015' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "ac037d5f-b7e7-48ab-bf07-92bf1615e81b",
              "parentUUID": "4c1af3cb-7276-4968-9ec4-81894f8bb842",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, Bug",
              "fullTitle": "findByType(pokeData, type) : returns the name and number of all pokemon with this type data sample 2, Bug",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByType(dataSample2, 'Bug');\nconst expected = [\n  { name: 'Paras', num: '046' },\n  { name: 'Parasect', num: '047' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "6d1bc3e1-86ca-4345-8633-2bb872499e84",
              "parentUUID": "4c1af3cb-7276-4968-9ec4-81894f8bb842",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, Water",
              "fullTitle": "findByType(pokeData, type) : returns the name and number of all pokemon with this type data sample 3, Water",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByType(dataSample3, 'Water');\nconst expected = [\n  { name: 'Seel', num: '086' },\n  { name: 'Dewgong', num: '087' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "812bda00-1127-490a-b9f8-dfb38ce69070",
              "parentUUID": "4c1af3cb-7276-4968-9ec4-81894f8bb842",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, Normal",
              "fullTitle": "findByType(pokeData, type) : returns the name and number of all pokemon with this type data sample 4, Normal",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByType(dataSample4, 'Normal');\nconst expected = [\n  { name: 'Tauros', num: '128' },\n  { name: 'Ditto', num: '132' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "7ba9ece0-13a3-44bf-ad05-4b35cb96743d",
              "parentUUID": "4c1af3cb-7276-4968-9ec4-81894f8bb842",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 5, Dragon",
              "fullTitle": "findByType(pokeData, type) : returns the name and number of all pokemon with this type data sample 5, Dragon",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByType(dataSample5, 'Dragon');\nconst expected = [\n  { name: 'Dratini', num: '147' },\n  { name: 'Dragonair', num: '148' },\n  { name: 'Dragonite', num: '149' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "6374af1b-3148-4426-995a-f42d0fdab451",
              "parentUUID": "4c1af3cb-7276-4968-9ec4-81894f8bb842",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ac037d5f-b7e7-48ab-bf07-92bf1615e81b",
            "6d1bc3e1-86ca-4345-8633-2bb872499e84",
            "812bda00-1127-490a-b9f8-dfb38ce69070",
            "7ba9ece0-13a3-44bf-ad05-4b35cb96743d",
            "6374af1b-3148-4426-995a-f42d0fdab451"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d02ca0e7-3f81-48c0-9acc-b2cfaa96c756",
          "title": "findByValue(pokeData, value) : returns the name and number of all pokemon with this value in any key",
          "fullFile": "/home/hackyourfuture/Documents/pokedex-api/logic/find-by/value/spec.js",
          "file": "/logic/find-by/value/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 1, 12",
              "fullTitle": "findByValue(pokeData, value) : returns the name and number of all pokemon with this value in any key data sample 1, 12",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByValue(dataSample1, '12');\nconst expected = [\n  { name: 'Caterpie', num: '010' },\n  { name: 'Butterfree', num: '012' },\n  { name: 'Weedle', num: '013' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "16f3c9dd-c02c-4652-98fe-4acfd903667d",
              "parentUUID": "d02ca0e7-3f81-48c0-9acc-b2cfaa96c756",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, Bug",
              "fullTitle": "findByValue(pokeData, value) : returns the name and number of all pokemon with this value in any key data sample 2, Bug",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByValue(dataSample2, 'Bug');\nconst expected = null;\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "35ff0d13-7f6b-4ec9-b344-0d59f4626555",
              "parentUUID": "d02ca0e7-3f81-48c0-9acc-b2cfaa96c756",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, None",
              "fullTitle": "findByValue(pokeData, value) : returns the name and number of all pokemon with this value in any key data sample 4, None",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByValue(dataSample4, 'None');\nconst expected = [\n  { name: 'Mr. Mime', num: '122' },\n  { name: 'Scyther', num: '123' },\n  { name: 'Jynx', num: '124' },\n  { name: 'Electabuzz', num: '125' },\n  { name: 'Magmar', num: '126' },\n  { name: 'Pinsir', num: '127' },\n  { name: 'Tauros', num: '128' },\n  { name: 'Lapras', num: '131' },\n  { name: 'Ditto', num: '132' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "c9ee7638-ea69-4ae0-8151-f2f395c28a7b",
              "parentUUID": "d02ca0e7-3f81-48c0-9acc-b2cfaa96c756",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 5, null",
              "fullTitle": "findByValue(pokeData, value) : returns the name and number of all pokemon with this value in any key data sample 5, null",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByValue(dataSample5, \"null\");\nconst expected = [\n  { name: 'Moltres', num: '146' },\n  { name: 'Dragonite', num: '149' },\n  { name: 'Mewtwo', num: '150' },\n  { name: 'Mew', num: '151' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "623589ea-a453-423d-a462-ff2ddad0069f",
              "parentUUID": "d02ca0e7-3f81-48c0-9acc-b2cfaa96c756",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "16f3c9dd-c02c-4652-98fe-4acfd903667d",
            "35ff0d13-7f6b-4ec9-b344-0d59f4626555",
            "c9ee7638-ea69-4ae0-8151-f2f395c28a7b",
            "623589ea-a453-423d-a462-ff2ddad0069f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d8dbe6aa-4169-4184-9c93-8cfef5f493d5",
          "title": "findByWeakness(pokeData, weakness) : returns the name and number of all pokemon with this weakness",
          "fullFile": "/home/hackyourfuture/Documents/pokedex-api/logic/find-by/weakness/spec.js",
          "file": "/logic/find-by/weakness/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 1, Electric",
              "fullTitle": "findByWeakness(pokeData, weakness) : returns the name and number of all pokemon with this weakness data sample 1, Electric",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByWeakness(dataSample1, 'Electric');\nconst expected = [\n  {\n    name: 'Squirtle',\n    num: '007'\n  },\n  {\n    name: 'Wartortle',\n    num: '008'\n  },\n  {\n    name: 'Blastoise',\n    num: '009'\n  },\n  {\n    name: 'Butterfree',\n    num: '012'\n  }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "e9c2edbe-5776-45f5-863b-807ba9a8fb66",
              "parentUUID": "d8dbe6aa-4169-4184-9c93-8cfef5f493d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, Bug",
              "fullTitle": "findByWeakness(pokeData, weakness) : returns the name and number of all pokemon with this weakness data sample 2, Bug",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByWeakness(dataSample2, 'Bug');\nconst expected = [\n  {\n    name: 'Paras',\n    num: '046'\n  },\n  {\n    name: 'Parasect',\n    num: '047'\n  }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "be1d1434-168c-40ac-a299-1406683a859e",
              "parentUUID": "d8dbe6aa-4169-4184-9c93-8cfef5f493d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, Fighting",
              "fullTitle": "findByWeakness(pokeData, weakness) : returns the name and number of all pokemon with this weakness data sample 3, Fighting",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByWeakness(dataSample3, 'Fighting');\nconst expected = [\n  {\n    name: 'Dewgong',\n    num: '087'\n  }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "79f05d27-b022-4410-ae9b-92d388bc4a1d",
              "parentUUID": "d8dbe6aa-4169-4184-9c93-8cfef5f493d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, Normal",
              "fullTitle": "findByWeakness(pokeData, weakness) : returns the name and number of all pokemon with this weakness data sample 4, Normal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByWeakness(dataSample4, 'Normal');\nconst expected = null;\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "0184e496-5310-40a3-9653-863d0a12c727",
              "parentUUID": "d8dbe6aa-4169-4184-9c93-8cfef5f493d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 5, Dragon",
              "fullTitle": "findByWeakness(pokeData, weakness) : returns the name and number of all pokemon with this weakness data sample 5, Dragon",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByWeakness(dataSample5, 'Dragon');\nconst expected = [\n  {\n    name: 'Dratini',\n    num: '147'\n  },\n  {\n    name: 'Dragonair',\n    num: '148'\n  },\n  {\n    name: 'Dragonite',\n    num: '149'\n  }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "bf61b553-323a-409f-b808-3cc792e3f775",
              "parentUUID": "d8dbe6aa-4169-4184-9c93-8cfef5f493d5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e9c2edbe-5776-45f5-863b-807ba9a8fb66",
            "be1d1434-168c-40ac-a299-1406683a859e",
            "79f05d27-b022-4410-ae9b-92d388bc4a1d",
            "0184e496-5310-40a3-9653-863d0a12c727",
            "bf61b553-323a-409f-b808-3cc792e3f775"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "84012d1c-769f-4049-9e56-c4146cb3539c",
          "title": "typeStats(pokeData, type) : returns how many times a type appears in the pokeData",
          "fullFile": "/home/hackyourfuture/Documents/pokedex-api/logic/type-stats/spec.js",
          "file": "/logic/type-stats/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 2, Grass",
              "fullTitle": "typeStats(pokeData, type) : returns how many times a type appears in the pokeData data sample 2, Grass",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = typeStats(dataSample2, 'Grass');\nconst expected = {\n  typeCount: 5,\n  typeName: 'Grass',\n  weaknessCount: 0\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "6a6b9de1-630e-4ecd-b429-b3449ac139ad",
              "parentUUID": "84012d1c-769f-4049-9e56-c4146cb3539c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, Fire",
              "fullTitle": "typeStats(pokeData, type) : returns how many times a type appears in the pokeData data sample 2, Fire",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = typeStats(dataSample2, 'Fire');\nconst expected = {\n  typeCount: 0,\n  typeName: 'Fire',\n  weaknessCount: 5\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "88a1cf14-435a-4999-9244-07a332de8cc3",
              "parentUUID": "84012d1c-769f-4049-9e56-c4146cb3539c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, Normal",
              "fullTitle": "typeStats(pokeData, type) : returns how many times a type appears in the pokeData data sample 4, Normal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = typeStats(dataSample4, 'Normal');\nconst expected = {\n  typeCount: 2,\n  typeName: 'Normal',\n  weaknessCount: 0\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "9fe87657-0fce-49af-8f8b-dea072a39a7a",
              "parentUUID": "84012d1c-769f-4049-9e56-c4146cb3539c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, Fighting",
              "fullTitle": "typeStats(pokeData, type) : returns how many times a type appears in the pokeData data sample 4, Fighting",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = typeStats(dataSample4, 'Fighting');\nconst expected = {\n  typeCount: 0,\n  typeName: 'Fighting',\n  weaknessCount: 3\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "a0a36703-9fba-455f-a963-98148602d25b",
              "parentUUID": "84012d1c-769f-4049-9e56-c4146cb3539c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 5, Dragon",
              "fullTitle": "typeStats(pokeData, type) : returns how many times a type appears in the pokeData data sample 5, Dragon",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = typeStats(dataSample5, 'Dragon');\nconst expected = {\n  typeCount: 3,\n  typeName: 'Dragon',\n  weaknessCount: 3\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "2c1f91ec-5984-4a54-9f58-b46fbfb17653",
              "parentUUID": "84012d1c-769f-4049-9e56-c4146cb3539c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 5, Fairy",
              "fullTitle": "typeStats(pokeData, type) : returns how many times a type appears in the pokeData data sample 5, Fairy",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = typeStats(dataSample5, 'Fairy');\nconst expected = {\n  typeCount: 0,\n  typeName: 'Fairy',\n  weaknessCount: 3\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "ed08d678-bb42-44b0-9e91-f7b6409e580b",
              "parentUUID": "84012d1c-769f-4049-9e56-c4146cb3539c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6a6b9de1-630e-4ecd-b429-b3449ac139ad",
            "88a1cf14-435a-4999-9244-07a332de8cc3",
            "9fe87657-0fce-49af-8f8b-dea072a39a7a",
            "a0a36703-9fba-455f-a963-98148602d25b",
            "2c1f91ec-5984-4a54-9f58-b46fbfb17653",
            "ed08d678-bb42-44b0-9e91-f7b6409e580b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1eb98678-1911-478f-a050-4bae760a68ac",
          "title": "valuesForKey(pokeData, key) : returns all unique values stored in that key",
          "fullFile": "/home/hackyourfuture/Documents/pokedex-api/logic/values-for-key/spec.js",
          "file": "/logic/values-for-key/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 2, id",
              "fullTitle": "valuesForKey(pokeData, key) : returns all unique values stored in that key data sample 2, id",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const actual = valuesForKey(dataSample2, 'id');\nconst expected = [43, 44, 45, 46, 47];\nassert.deepStrictEqual(actual, expected);",
              "err": {
                "message": "AssertionError: Expected values to be strictly deep-equal:\n+ actual - expected\n\n+ []\n- [\n-   43,\n-   44,\n-   45,\n-   46,\n-   47\n- ]",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly deep-equal:\n+ actual - expected\n\n+ []\n- [\n-   43,\n-   44,\n-   45,\n-   46,\n-   47\n- ]\n    at Context.<anonymous> (logic/values-for-key/spec.js:15:12)\n    at processImmediate (internal/timers.js:456:21)",
                "diff": "- []\n+ [\n+   43\n+   44\n+   45\n+   46\n+   47\n+ ]\n"
              },
              "uuid": "81a070a6-10a8-4dae-8c8d-6b44859a9eae",
              "parentUUID": "1eb98678-1911-478f-a050-4bae760a68ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, name",
              "fullTitle": "valuesForKey(pokeData, key) : returns all unique values stored in that key data sample 2, name",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const actual = valuesForKey(dataSample2, 'name');\nconst expected = [\n  'Oddish',\n  'Gloom',\n  'Vileplume',\n  'Paras',\n  'Parasect'\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {
                "message": "AssertionError: Expected values to be strictly deep-equal:\n+ actual - expected\n\n+ []\n- [\n-   'Oddish',\n-   'Gloom',\n-   'Vileplume',\n-   'Paras',\n-   'Parasect'\n- ]",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly deep-equal:\n+ actual - expected\n\n+ []\n- [\n-   'Oddish',\n-   'Gloom',\n-   'Vileplume',\n-   'Paras',\n-   'Parasect'\n- ]\n    at Context.<anonymous> (logic/values-for-key/spec.js:27:12)\n    at processImmediate (internal/timers.js:456:21)",
                "diff": "- []\n+ [\n+   \"Oddish\"\n+   \"Gloom\"\n+   \"Vileplume\"\n+   \"Paras\"\n+   \"Parasect\"\n+ ]\n"
              },
              "uuid": "db0a00ec-eae9-405c-b76e-3f8191818430",
              "parentUUID": "1eb98678-1911-478f-a050-4bae760a68ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, num",
              "fullTitle": "valuesForKey(pokeData, key) : returns all unique values stored in that key data sample 3, num",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const actual = valuesForKey(dataSample3, 'num');\nconst expected = ['083', '084', '085', '086', '087'];\nassert.deepStrictEqual(actual, expected);",
              "err": {
                "message": "AssertionError: Expected values to be strictly deep-equal:\n+ actual - expected\n\n+ []\n- [\n-   '083',\n-   '084',\n-   '085',\n-   '086',\n-   '087'\n- ]",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly deep-equal:\n+ actual - expected\n\n+ []\n- [\n-   '083',\n-   '084',\n-   '085',\n-   '086',\n-   '087'\n- ]\n    at Context.<anonymous> (logic/values-for-key/spec.js:33:12)\n    at processImmediate (internal/timers.js:456:21)",
                "diff": "- []\n+ [\n+   \"083\"\n+   \"084\"\n+   \"085\"\n+   \"086\"\n+   \"087\"\n+ ]\n"
              },
              "uuid": "be20c494-35bd-4041-8bb7-67dca368443e",
              "parentUUID": "1eb98678-1911-478f-a050-4bae760a68ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, multipliers",
              "fullTitle": "valuesForKey(pokeData, key) : returns all unique values stored in that key data sample 3, multipliers",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const actual = valuesForKey(dataSample3, 'multipliers');\nconst expected = [\n  null,\n  [2.19, 2.24],\n  [1.04, 1.96]\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {
                "message": "AssertionError: Expected values to be strictly deep-equal:\n+ actual - expected\n\n+ []\n- [\n-   null,\n-   [\n-     2.19,\n-     2.24\n-   ],\n-   [\n-     1.04,\n-     1.96\n-   ]\n- ]",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly deep-equal:\n+ actual - expected\n\n+ []\n- [\n-   null,\n-   [\n-     2.19,\n-     2.24\n-   ],\n-   [\n-     1.04,\n-     1.96\n-   ]\n- ]\n    at Context.<anonymous> (logic/values-for-key/spec.js:43:12)\n    at processImmediate (internal/timers.js:456:21)",
                "diff": "- []\n+ [\n+   [null]\n+   [\n+     2.19\n+     2.24\n+   ]\n+   [\n+     1.04\n+     1.96\n+   ]\n+ ]\n"
              },
              "uuid": "67752286-b071-46a1-be73-96d8fd0a314d",
              "parentUUID": "1eb98678-1911-478f-a050-4bae760a68ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, weaknesses",
              "fullTitle": "valuesForKey(pokeData, key) : returns all unique values stored in that key data sample 4, weaknesses",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const actual = valuesForKey(dataSample4, 'weaknesses');\nconst expected = [\n  ['Bug', 'Ghost', 'Dark'],\n  ['Fire', 'Electric', 'Ice', 'Flying', 'Rock'],\n  ['Fire', 'Bug', 'Rock', 'Ghost', 'Dark', 'Steel'],\n  ['Ground'],\n  ['Water', 'Ground', 'Rock'],\n  ['Fire', 'Flying', 'Rock'],\n  ['Fighting'],\n  ['Electric', 'Grass'],\n  ['Electric', 'Rock'],\n  ['Electric', 'Grass', 'Fighting', 'Rock'],\n  \n];\nassert.deepStrictEqual(actual, expected);",
              "err": {
                "message": "AssertionError: Expected values to be strictly deep-equal:\n+ actual - expected ... Lines skipped\n\n+ []\n...\n- [\n-   [\n-     'Bug',\n-     'Ghost',\n-     'Dark'\n-   ],\n-   [\n-     'Fire',\n-     'Electric',\n-     'Ice',\n-     'Flying',\n-     'Rock'\n-   ],\n-   [\n-     'Fire',\n-     'Bug',\n-     'Rock',\n-     'Ghost',\n-     'Dark',\n-     'Steel'\n-   ],\n-   [\n-     'Ground'\n-   ],\n-   [\n-     'Water',\n-     'Ground',\n-     'Rock'\n-   ],\n-   [\n-     'Fire',\n-     'Flying',\n-     'Rock'\n-   ],\n-   [\n-     'Fighting'\n-   ],\n-   [\n-     'Electric',\n-     'Grass'\n-   ],\n-   [\n-     'Electric',\n-     'Rock'\n-   ],\n-   [\n-     'Electric',\n-     'Grass',\n-     'Fighting',\n-     'Rock'\n...",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly deep-equal:\n+ actual - expected ... Lines skipped\n\n+ []\n...\n- [\n-   [\n-     'Bug',\n-     'Ghost',\n-     'Dark'\n-   ],\n-   [\n-     'Fire',\n-     'Electric',\n-     'Ice',\n-     'Flying',\n-     'Rock'\n-   ],\n-   [\n-     'Fire',\n-     'Bug',\n-     'Rock',\n-     'Ghost',\n-     'Dark',\n-     'Steel'\n-   ],\n-   [\n-     'Ground'\n-   ],\n-   [\n-     'Water',\n-     'Ground',\n-     'Rock'\n-   ],\n-   [\n-     'Fire',\n-     'Flying',\n-     'Rock'\n-   ],\n-   [\n-     'Fighting'\n-   ],\n-   [\n-     'Electric',\n-     'Grass'\n-   ],\n-   [\n-     'Electric',\n-     'Rock'\n-   ],\n-   [\n-     'Electric',\n-     'Grass',\n-     'Fighting',\n-     'Rock'\n...\n    at Context.<anonymous> (logic/values-for-key/spec.js:61:12)\n    at processImmediate (internal/timers.js:456:21)",
                "diff": "- []\n+ [\n+   [\n+     \"Bug\"\n+     \"Ghost\"\n+     \"Dark\"\n+   ]\n+   [\n+     \"Fire\"\n+     \"Electric\"\n+     \"Ice\"\n+     \"Flying\"\n+     \"Rock\"\n+   ]\n+   [\n+     \"Fire\"\n+     \"Bug\"\n+     \"Rock\"\n+     \"Ghost\"\n+     \"Dark\"\n+     \"Steel\"\n+   ]\n+   [\n+     \"Ground\"\n+   ]\n+   [\n+     \"Water\"\n+     \"Ground\"\n+     \"Rock\"\n+   ]\n+   [\n+     \"Fire\"\n+     \"Flying\"\n+     \"Rock\"\n+   ]\n+   [\n+     \"Fighting\"\n+   ]\n+   [\n+     \"Electric\"\n+     \"Grass\"\n+   ]\n+   [\n+     \"Electric\"\n+     \"Rock\"\n+   ]\n+   [\n+     \"Electric\"\n+     \"Grass\"\n+     \"Fighting\"\n+     \"Rock\"\n+   ]\n+ ]\n"
              },
              "uuid": "d6ee44a7-5d29-415b-b68e-cdb8e17e08b2",
              "parentUUID": "1eb98678-1911-478f-a050-4bae760a68ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, prev_evolution",
              "fullTitle": "valuesForKey(pokeData, key) : returns all unique values stored in that key data sample 4, prev_evolution",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const actual = valuesForKey(dataSample4, 'prev_evolution');\nconst expected = [\n  [\n    { num: '129', name: 'Magikarp' }\n  ]\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {
                "message": "AssertionError: Expected values to be strictly deep-equal:\n+ actual - expected\n\n+ []\n- [\n-   [\n-     {\n-       name: 'Magikarp',\n-       num: '129'\n-     }\n-   ]\n- ]",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly deep-equal:\n+ actual - expected\n\n+ []\n- [\n-   [\n-     {\n-       name: 'Magikarp',\n-       num: '129'\n-     }\n-   ]\n- ]\n    at Context.<anonymous> (logic/values-for-key/spec.js:71:12)\n    at processImmediate (internal/timers.js:456:21)",
                "diff": "- []\n+ [\n+   [\n+     {\n+       \"name\": \"Magikarp\"\n+       \"num\": \"129\"\n+     }\n+   ]\n+ ]\n"
              },
              "uuid": "8d67222d-da02-45d0-8fd9-cfc58144e4e1",
              "parentUUID": "1eb98678-1911-478f-a050-4bae760a68ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 5, next_evolution",
              "fullTitle": "valuesForKey(pokeData, key) : returns all unique values stored in that key data sample 5, next_evolution",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const actual = valuesForKey(dataSample5, 'next_evolution');\nconst expected = [\n  [\n    { num: '148', name: 'Dragonair' },\n    { num: '149', name: 'Dragonite' }\n  ],\n  [\n    { num: '149', name: 'Dragonite' }\n  ]\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {
                "message": "AssertionError: Expected values to be strictly deep-equal:\n+ actual - expected\n\n+ []\n- [\n-   [\n-     {\n-       name: 'Dragonair',\n-       num: '148'\n-     },\n-     {\n-       name: 'Dragonite',\n-       num: '149'\n-     }\n-   ],\n-   [\n-     {\n-       name: 'Dragonite',\n-       num: '149'\n-     }\n-   ]\n- ]",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly deep-equal:\n+ actual - expected\n\n+ []\n- [\n-   [\n-     {\n-       name: 'Dragonair',\n-       num: '148'\n-     },\n-     {\n-       name: 'Dragonite',\n-       num: '149'\n-     }\n-   ],\n-   [\n-     {\n-       name: 'Dragonite',\n-       num: '149'\n-     }\n-   ]\n- ]\n    at Context.<anonymous> (logic/values-for-key/spec.js:85:12)\n    at processImmediate (internal/timers.js:456:21)",
                "diff": "- []\n+ [\n+   [\n+     {\n+       \"name\": \"Dragonair\"\n+       \"num\": \"148\"\n+     }\n+     {\n+       \"name\": \"Dragonite\"\n+       \"num\": \"149\"\n+     }\n+   ]\n+   [\n+     {\n+       \"name\": \"Dragonite\"\n+       \"num\": \"149\"\n+     }\n+   ]\n+ ]\n"
              },
              "uuid": "a4e0bee6-a6f9-4adb-8832-058c4f464d85",
              "parentUUID": "1eb98678-1911-478f-a050-4bae760a68ac",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "81a070a6-10a8-4dae-8c8d-6b44859a9eae",
            "db0a00ec-eae9-405c-b76e-3f8191818430",
            "be20c494-35bd-4041-8bb7-67dca368443e",
            "67752286-b071-46a1-be73-96d8fd0a314d",
            "d6ee44a7-5d29-415b-b68e-cdb8e17e08b2",
            "8d67222d-da02-45d0-8fd9-cfc58144e4e1",
            "a4e0bee6-a6f9-4adb-8832-058c4f464d85"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}