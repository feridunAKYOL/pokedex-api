{
  "stats": {
    "suites": 8,
    "tests": 45,
    "passes": 44,
    "pending": 0,
    "failures": 1,
    "start": "2020-05-28T08:17:17.619Z",
    "end": "2020-05-28T08:17:17.680Z",
    "duration": 61,
    "testsRegistered": 45,
    "passPercent": 97.77777777777777,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9ca120fa-7382-48b1-957c-086bc68d6da9",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "00aede22-173f-43dd-9646-3e4b4ba6413d",
          "title": "evolutionOf(pokeData, name) : returns all evolutions of a pokemon: ",
          "fullFile": "/home/hackyourfuture/Documents/pokedex-api/logic/evolutions-of/spec.js",
          "file": "/logic/evolutions-of/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 1, Squirtle",
              "fullTitle": "evolutionOf(pokeData, name) : returns all evolutions of a pokemon:  data sample 1, Squirtle",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = evolutionOf(dataSample1, 'Squirtle');\nconst expected = [\n  { \"num\": \"007\", \"name\": \"Squirtle\" },\n  { \"num\": \"008\", \"name\": \"Wartortle\" },\n  { \"num\": \"009\", \"name\": \"Blastoise\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "894dfb31-d868-4b8a-965f-52c54285b9a9",
              "parentUUID": "00aede22-173f-43dd-9646-3e4b4ba6413d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 1, Wartortle",
              "fullTitle": "evolutionOf(pokeData, name) : returns all evolutions of a pokemon:  data sample 1, Wartortle",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = evolutionOf(dataSample1, 'Wartortle');\nconst expected = [\n  { \"num\": \"007\", \"name\": \"Squirtle\" },\n  { \"num\": \"008\", \"name\": \"Wartortle\" },\n  { \"num\": \"009\", \"name\": \"Blastoise\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "672477ac-c80d-4072-ae98-b8c172c192f7",
              "parentUUID": "00aede22-173f-43dd-9646-3e4b4ba6413d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 1, Blastoise",
              "fullTitle": "evolutionOf(pokeData, name) : returns all evolutions of a pokemon:  data sample 1, Blastoise",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = evolutionOf(dataSample1, 'Blastoise');\nconst expected = [\n  { \"num\": \"007\", \"name\": \"Squirtle\" },\n  { \"num\": \"008\", \"name\": \"Wartortle\" },\n  { \"num\": \"009\", \"name\": \"Blastoise\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "f7213c9a-8f44-4a1a-8311-32fc73e3ec1e",
              "parentUUID": "00aede22-173f-43dd-9646-3e4b4ba6413d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, DoesNotExist",
              "fullTitle": "evolutionOf(pokeData, name) : returns all evolutions of a pokemon:  data sample 3, DoesNotExist",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = evolutionOf(dataSample3, 'DoesNotExist');\nconst expected = null;\nassert.strictEqual(actual, expected);",
              "err": {},
              "uuid": "9ca16537-174a-4115-8075-9686cb7a0839",
              "parentUUID": "00aede22-173f-43dd-9646-3e4b4ba6413d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 5, Mew",
              "fullTitle": "evolutionOf(pokeData, name) : returns all evolutions of a pokemon:  data sample 5, Mew",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = evolutionOf(dataSample5, 'Mew');\nconst expected = [\n  { \"name\": \"Mew\", \"num\": \"151\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "1ed55cc3-797f-4c03-8c19-9f23c4c8b777",
              "parentUUID": "00aede22-173f-43dd-9646-3e4b4ba6413d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "894dfb31-d868-4b8a-965f-52c54285b9a9",
            "672477ac-c80d-4072-ae98-b8c172c192f7",
            "f7213c9a-8f44-4a1a-8311-32fc73e3ec1e",
            "9ca16537-174a-4115-8075-9686cb7a0839",
            "1ed55cc3-797f-4c03-8c19-9f23c4c8b777"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "210c9690-6cf5-4618-a6b0-a8b0aa0e5af9",
          "title": "findById(pokeData, id) : returns the pokemon object with the given id",
          "fullFile": "/home/hackyourfuture/Documents/pokedex-api/logic/find-by/id/spec.js",
          "file": "/logic/find-by/id/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 1, 13",
              "fullTitle": "findById(pokeData, id) : returns the pokemon object with the given id data sample 1, 13",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findById(dataSample1, 13);\nconst expected = {\n  \"id\": 13,\n  \"num\": \"013\",\n  \"name\": \"Weedle\",\n  \"img\": \"http://www.serebii.net/pokemongo/pokemon/013.png\",\n  \"type\": [\n    \"Bug\",\n    \"Poison\"\n  ],\n  \"height\": \"0.30 m\",\n  \"weight\": \"3.2 kg\",\n  \"candy\": \"Weedle Candy\",\n  \"candy_count\": 12,\n  \"egg\": \"2 km\",\n  \"spawn_chance\": 7.12,\n  \"avg_spawns\": 712,\n  \"spawn_time\": \"02:21\",\n  \"multipliers\": [\n    1.01,\n    1.09\n  ],\n  \"weaknesses\": [\n    \"Fire\",\n    \"Flying\",\n    \"Psychic\",\n    \"Rock\"\n  ],\n  \"next_evolution\": [\n    { \"num\": \"014\", \"name\": \"Kakuna\" },\n    { \"num\": \"015\", \"name\": \"Beedrill\" }\n  ]\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "2f16b9b9-1664-4436-9ece-287416aa853b",
              "parentUUID": "210c9690-6cf5-4618-a6b0-a8b0aa0e5af9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 1, 16",
              "fullTitle": "findById(pokeData, id) : returns the pokemon object with the given id data sample 1, 16",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findById(dataSample1, 16);\nconst expected = null;\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "ac1d188e-ba03-48a2-83d1-9526be2e9247",
              "parentUUID": "210c9690-6cf5-4618-a6b0-a8b0aa0e5af9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, 46",
              "fullTitle": "findById(pokeData, id) : returns the pokemon object with the given id data sample 2, 46",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findById(dataSample2, 46);\nconst expected = {\n  \"id\": 46,\n  \"num\": \"046\",\n  \"name\": \"Paras\",\n  \"img\": \"http://www.serebii.net/pokemongo/pokemon/046.png\",\n  \"type\": [\n    \"Bug\",\n    \"Grass\"\n  ],\n  \"height\": \"0.30 m\",\n  \"weight\": \"5.4 kg\",\n  \"candy\": \"Paras Candy\",\n  \"candy_count\": 50,\n  \"egg\": \"5 km\",\n  \"spawn_chance\": 2.36,\n  \"avg_spawns\": 236,\n  \"spawn_time\": \"01:42\",\n  \"multipliers\": [\n    2.02\n  ],\n  \"weaknesses\": [\n    \"Fire\",\n    \"Ice\",\n    \"Poison\",\n    \"Flying\",\n    \"Bug\",\n    \"Rock\"\n  ],\n  \"next_evolution\": [\n    {\n      \"num\": \"047\",\n      \"name\": \"Parasect\"\n    }\n  ]\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "e72c6955-ceec-44aa-b817-ea3d1426a110",
              "parentUUID": "210c9690-6cf5-4618-a6b0-a8b0aa0e5af9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, 42",
              "fullTitle": "findById(pokeData, id) : returns the pokemon object with the given id data sample 2, 42",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findById(dataSample2, 42);\nconst expected = null;\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "f76e69f1-5e9f-43e6-b635-85a899a4bc4a",
              "parentUUID": "210c9690-6cf5-4618-a6b0-a8b0aa0e5af9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, 84",
              "fullTitle": "findById(pokeData, id) : returns the pokemon object with the given id data sample 3, 84",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findById(dataSample3, 84);\nconst expected = {\n  \"id\": 84,\n  \"num\": \"084\",\n  \"name\": \"Doduo\",\n  \"img\": \"http://www.serebii.net/pokemongo/pokemon/084.png\",\n  \"type\": [\n    \"Normal\",\n    \"Flying\"\n  ],\n  \"height\": \"1.40 m\",\n  \"weight\": \"39.2 kg\",\n  \"candy\": \"Doduo Candy\",\n  \"candy_count\": 50,\n  \"egg\": \"5 km\",\n  \"spawn_chance\": 0.52,\n  \"avg_spawns\": 52,\n  \"spawn_time\": \"05:10\",\n  \"multipliers\": [\n    2.19,\n    2.24\n  ],\n  \"weaknesses\": [\n    \"Electric\",\n    \"Rock\"\n  ],\n  \"next_evolution\": [\n    {\n      \"num\": \"085\",\n      \"name\": \"Dodrio\"\n    }\n  ]\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "5f56bcb0-0f5c-47c0-adc2-dd03c4f97437",
              "parentUUID": "210c9690-6cf5-4618-a6b0-a8b0aa0e5af9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, 85",
              "fullTitle": "findById(pokeData, id) : returns the pokemon object with the given id data sample 3, 85",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findById(dataSample3, 85);\nconst expected = {\n  \"id\": 85,\n  \"num\": \"085\",\n  \"name\": \"Dodrio\",\n  \"img\": \"http://www.serebii.net/pokemongo/pokemon/085.png\",\n  \"type\": [\n    \"Normal\",\n    \"Flying\"\n  ],\n  \"height\": \"1.80 m\",\n  \"weight\": \"85.2 kg\",\n  \"candy\": \"Doduo Candy\",\n  \"egg\": \"Not in Eggs\",\n  \"spawn_chance\": 0.22,\n  \"avg_spawns\": 22,\n  \"spawn_time\": \"02:12\",\n  \"multipliers\": null,\n  \"weaknesses\": [\n    \"Electric\",\n    \"Rock\"\n  ],\n  \"prev_evolution\": [\n    {\n      \"num\": \"084\",\n      \"name\": \"Doduo\"\n    }\n  ]\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "085cd36b-d182-4f42-8e10-2900833e3136",
              "parentUUID": "210c9690-6cf5-4618-a6b0-a8b0aa0e5af9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2f16b9b9-1664-4436-9ece-287416aa853b",
            "ac1d188e-ba03-48a2-83d1-9526be2e9247",
            "e72c6955-ceec-44aa-b817-ea3d1426a110",
            "f76e69f1-5e9f-43e6-b635-85a899a4bc4a",
            "5f56bcb0-0f5c-47c0-adc2-dd03c4f97437",
            "085cd36b-d182-4f42-8e10-2900833e3136"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d9335141-395e-47a6-8078-fa60fb8baceb",
          "title": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair",
          "fullFile": "/home/hackyourfuture/Documents/pokedex-api/logic/find-by/key-value/spec.js",
          "file": "/logic/find-by/key-value/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 1, name, Weedle",
              "fullTitle": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair data sample 1, name, Weedle",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByKeyValue(dataSample1, 'name', 'Weedle');\nconst expected = [\n  { \"num\": \"013\", \"name\": \"Weedle\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "c04bb0de-b4ac-4491-be3a-a0e83393ca55",
              "parentUUID": "d9335141-395e-47a6-8078-fa60fb8baceb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 1, id, 12",
              "fullTitle": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair data sample 1, id, 12",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByKeyValue(dataSample1, 'id', \"12\");\nconst expected = [\n  { \"num\": \"012\", \"name\": \"Butterfree\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "2d22d4e2-e8ad-4d3d-ab59-77b1e99f6b46",
              "parentUUID": "d9335141-395e-47a6-8078-fa60fb8baceb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, doesNotExist, hi!",
              "fullTitle": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair data sample 2, doesNotExist, hi!",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByKeyValue(dataSample2, 'doesNotExist', 'hi!');\nconst expected = null;\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "4c6e8e58-405f-42e6-88af-d423294f41ae",
              "parentUUID": "d9335141-395e-47a6-8078-fa60fb8baceb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, name, Mew",
              "fullTitle": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair data sample 2, name, Mew",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByKeyValue(dataSample2, 'name', 'Mew');\nconst expected = null;\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "1a0d648a-cb76-4c0d-ad66-d8d7c8776ba3",
              "parentUUID": "d9335141-395e-47a6-8078-fa60fb8baceb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, egg, Not in Eggs",
              "fullTitle": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair data sample 3, egg, Not in Eggs",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByKeyValue(dataSample3, 'egg', 'Not in Eggs');\nconst expected = [\n  { \"num\": \"085\", \"name\": \"Dodrio\" },\n  { \"num\": \"087\", \"name\": \"Dewgong\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "9d8873ac-5183-42bf-af28-ce4edc2c4500",
              "parentUUID": "d9335141-395e-47a6-8078-fa60fb8baceb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, egg, 5 km",
              "fullTitle": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair data sample 3, egg, 5 km",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByKeyValue(dataSample3, 'egg', '5 km');\nconst expected = [\n  { \"num\": \"083\", \"name\": \"Farfetch'd\" },\n  { \"num\": \"084\", \"name\": \"Doduo\" },\n  { \"num\": \"086\", \"name\": \"Seel\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "3ff58996-f7d0-4339-a307-1f7b6a9eca5c",
              "parentUUID": "d9335141-395e-47a6-8078-fa60fb8baceb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, spawn_time, N/A",
              "fullTitle": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair data sample 4, spawn_time, N/A",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByKeyValue(dataSample4, 'spawn_time', 'N/A');\nconst expected = [\n  { \"num\": \"132\", \"name\": \"Ditto\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "99f2d9a6-97c8-48a2-bde8-96311cc936eb",
              "parentUUID": "d9335141-395e-47a6-8078-fa60fb8baceb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c04bb0de-b4ac-4491-be3a-a0e83393ca55",
            "2d22d4e2-e8ad-4d3d-ab59-77b1e99f6b46",
            "4c6e8e58-405f-42e6-88af-d423294f41ae",
            "1a0d648a-cb76-4c0d-ad66-d8d7c8776ba3",
            "9d8873ac-5183-42bf-af28-ce4edc2c4500",
            "3ff58996-f7d0-4339-a307-1f7b6a9eca5c",
            "99f2d9a6-97c8-48a2-bde8-96311cc936eb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "939af299-02d2-4bcb-b3a0-5cc42de6df83",
          "title": "findByType(pokeData, type) : returns the name and number of all pokemon with this type",
          "fullFile": "/home/hackyourfuture/Documents/pokedex-api/logic/find-by/type/spec.js",
          "file": "/logic/find-by/type/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 1, Bug",
              "fullTitle": "findByType(pokeData, type) : returns the name and number of all pokemon with this type data sample 1, Bug",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByType(dataSample1, 'Bug');\nconst expected = [\n  { name: 'Caterpie', num: '010' },\n  { name: 'Metapod', num: '011' },\n  { name: 'Butterfree', num: '012' },\n  { name: 'Weedle', num: '013' },\n  { name: 'Kakuna', num: '014' },\n  { name: 'Beedrill', num: '015' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "93b005ca-e948-4e7c-b3cf-d3c8cf8c326c",
              "parentUUID": "939af299-02d2-4bcb-b3a0-5cc42de6df83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, Bug",
              "fullTitle": "findByType(pokeData, type) : returns the name and number of all pokemon with this type data sample 2, Bug",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByType(dataSample2, 'Bug');\nconst expected = [\n  { name: 'Paras', num: '046' },\n  { name: 'Parasect', num: '047' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "2e3aa10c-269e-4cd7-9b1d-c8dc273b75a7",
              "parentUUID": "939af299-02d2-4bcb-b3a0-5cc42de6df83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, Water",
              "fullTitle": "findByType(pokeData, type) : returns the name and number of all pokemon with this type data sample 3, Water",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByType(dataSample3, 'Water');\nconst expected = [\n  { name: 'Seel', num: '086' },\n  { name: 'Dewgong', num: '087' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "92dc2c1c-1976-40ac-9932-c4149ffe4bdf",
              "parentUUID": "939af299-02d2-4bcb-b3a0-5cc42de6df83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, Normal",
              "fullTitle": "findByType(pokeData, type) : returns the name and number of all pokemon with this type data sample 4, Normal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByType(dataSample4, 'Normal');\nconst expected = [\n  { name: 'Tauros', num: '128' },\n  { name: 'Ditto', num: '132' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "b5859f40-2708-4a3e-a608-87569738f62d",
              "parentUUID": "939af299-02d2-4bcb-b3a0-5cc42de6df83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 5, Dragon",
              "fullTitle": "findByType(pokeData, type) : returns the name and number of all pokemon with this type data sample 5, Dragon",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByType(dataSample5, 'Dragon');\nconst expected = [\n  { name: 'Dratini', num: '147' },\n  { name: 'Dragonair', num: '148' },\n  { name: 'Dragonite', num: '149' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "3e1b989e-98e9-4945-a035-17f312d41758",
              "parentUUID": "939af299-02d2-4bcb-b3a0-5cc42de6df83",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "93b005ca-e948-4e7c-b3cf-d3c8cf8c326c",
            "2e3aa10c-269e-4cd7-9b1d-c8dc273b75a7",
            "92dc2c1c-1976-40ac-9932-c4149ffe4bdf",
            "b5859f40-2708-4a3e-a608-87569738f62d",
            "3e1b989e-98e9-4945-a035-17f312d41758"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0ffd76f3-2aed-40ad-b55d-472805207650",
          "title": "findByValue(pokeData, value) : returns the name and number of all pokemon with this value in any key",
          "fullFile": "/home/hackyourfuture/Documents/pokedex-api/logic/find-by/value/spec.js",
          "file": "/logic/find-by/value/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 1, 12",
              "fullTitle": "findByValue(pokeData, value) : returns the name and number of all pokemon with this value in any key data sample 1, 12",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByValue(dataSample1, '12');\nconst expected = [\n  { name: 'Caterpie', num: '010' },\n  { name: 'Butterfree', num: '012' },\n  { name: 'Weedle', num: '013' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "878cf004-8cf4-477a-a35b-eb316bcf0172",
              "parentUUID": "0ffd76f3-2aed-40ad-b55d-472805207650",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, Bug",
              "fullTitle": "findByValue(pokeData, value) : returns the name and number of all pokemon with this value in any key data sample 2, Bug",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByValue(dataSample2, 'Bug');\nconst expected = null;\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "9c9da8df-e93c-4e80-8513-1866c2899d0d",
              "parentUUID": "0ffd76f3-2aed-40ad-b55d-472805207650",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, None",
              "fullTitle": "findByValue(pokeData, value) : returns the name and number of all pokemon with this value in any key data sample 4, None",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByValue(dataSample4, 'None');\nconst expected = [\n  { name: 'Mr. Mime', num: '122' },\n  { name: 'Scyther', num: '123' },\n  { name: 'Jynx', num: '124' },\n  { name: 'Electabuzz', num: '125' },\n  { name: 'Magmar', num: '126' },\n  { name: 'Pinsir', num: '127' },\n  { name: 'Tauros', num: '128' },\n  { name: 'Lapras', num: '131' },\n  { name: 'Ditto', num: '132' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "0c245c7a-debf-4ade-afdd-9daa92be93ee",
              "parentUUID": "0ffd76f3-2aed-40ad-b55d-472805207650",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 5, null",
              "fullTitle": "findByValue(pokeData, value) : returns the name and number of all pokemon with this value in any key data sample 5, null",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByValue(dataSample5, \"null\");\nconst expected = [\n  { name: 'Moltres', num: '146' },\n  { name: 'Dragonite', num: '149' },\n  { name: 'Mewtwo', num: '150' },\n  { name: 'Mew', num: '151' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "03efa1cc-529a-4ff3-9044-1b719ebd7445",
              "parentUUID": "0ffd76f3-2aed-40ad-b55d-472805207650",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "878cf004-8cf4-477a-a35b-eb316bcf0172",
            "9c9da8df-e93c-4e80-8513-1866c2899d0d",
            "0c245c7a-debf-4ade-afdd-9daa92be93ee",
            "03efa1cc-529a-4ff3-9044-1b719ebd7445"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9e08ee61-6f95-45a8-b3ba-376b57efd48c",
          "title": "findByWeakness(pokeData, weakness) : returns the name and number of all pokemon with this weakness",
          "fullFile": "/home/hackyourfuture/Documents/pokedex-api/logic/find-by/weakness/spec.js",
          "file": "/logic/find-by/weakness/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 1, Electric",
              "fullTitle": "findByWeakness(pokeData, weakness) : returns the name and number of all pokemon with this weakness data sample 1, Electric",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByWeakness(dataSample1, 'Electric');\nconst expected = [\n  {\n    name: 'Squirtle',\n    num: '007'\n  },\n  {\n    name: 'Wartortle',\n    num: '008'\n  },\n  {\n    name: 'Blastoise',\n    num: '009'\n  },\n  {\n    name: 'Butterfree',\n    num: '012'\n  }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "7efa6482-9448-44d5-89ad-452c11e5c17b",
              "parentUUID": "9e08ee61-6f95-45a8-b3ba-376b57efd48c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, Bug",
              "fullTitle": "findByWeakness(pokeData, weakness) : returns the name and number of all pokemon with this weakness data sample 2, Bug",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByWeakness(dataSample2, 'Bug');\nconst expected = [\n  {\n    name: 'Paras',\n    num: '046'\n  },\n  {\n    name: 'Parasect',\n    num: '047'\n  }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "a3f0d335-bcdc-47c6-b143-bae1f8181c0a",
              "parentUUID": "9e08ee61-6f95-45a8-b3ba-376b57efd48c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, Fighting",
              "fullTitle": "findByWeakness(pokeData, weakness) : returns the name and number of all pokemon with this weakness data sample 3, Fighting",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByWeakness(dataSample3, 'Fighting');\nconst expected = [\n  {\n    name: 'Dewgong',\n    num: '087'\n  }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "2a94829b-0f84-47e7-aec7-b1a0968b47aa",
              "parentUUID": "9e08ee61-6f95-45a8-b3ba-376b57efd48c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, Normal",
              "fullTitle": "findByWeakness(pokeData, weakness) : returns the name and number of all pokemon with this weakness data sample 4, Normal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByWeakness(dataSample4, 'Normal');\nconst expected = null;\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "742f7269-7e33-42fe-943f-a6bbb6d3e055",
              "parentUUID": "9e08ee61-6f95-45a8-b3ba-376b57efd48c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 5, Dragon",
              "fullTitle": "findByWeakness(pokeData, weakness) : returns the name and number of all pokemon with this weakness data sample 5, Dragon",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByWeakness(dataSample5, 'Dragon');\nconst expected = [\n  {\n    name: 'Dratini',\n    num: '147'\n  },\n  {\n    name: 'Dragonair',\n    num: '148'\n  },\n  {\n    name: 'Dragonite',\n    num: '149'\n  }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "20ae6d77-50af-424d-841b-8d661404ade6",
              "parentUUID": "9e08ee61-6f95-45a8-b3ba-376b57efd48c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7efa6482-9448-44d5-89ad-452c11e5c17b",
            "a3f0d335-bcdc-47c6-b143-bae1f8181c0a",
            "2a94829b-0f84-47e7-aec7-b1a0968b47aa",
            "742f7269-7e33-42fe-943f-a6bbb6d3e055",
            "20ae6d77-50af-424d-841b-8d661404ade6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0afa0e4a-3714-408b-a69a-fc28d555ad99",
          "title": "typeStats(pokeData, type) : returns how many times a type appears in the pokeData",
          "fullFile": "/home/hackyourfuture/Documents/pokedex-api/logic/type-stats/spec.js",
          "file": "/logic/type-stats/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 2, Grass",
              "fullTitle": "typeStats(pokeData, type) : returns how many times a type appears in the pokeData data sample 2, Grass",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = typeStats(dataSample2, 'Grass');\nconst expected = {\n  typeCount: 5,\n  typeName: 'Grass',\n  weaknessCount: 0\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "342a60e5-5634-4bf9-8c7c-43d713c1afa7",
              "parentUUID": "0afa0e4a-3714-408b-a69a-fc28d555ad99",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, Fire",
              "fullTitle": "typeStats(pokeData, type) : returns how many times a type appears in the pokeData data sample 2, Fire",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = typeStats(dataSample2, 'Fire');\nconst expected = {\n  typeCount: 0,\n  typeName: 'Fire',\n  weaknessCount: 5\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "0d1d8869-47d5-4c46-b96e-fe50dfedf9d9",
              "parentUUID": "0afa0e4a-3714-408b-a69a-fc28d555ad99",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, Normal",
              "fullTitle": "typeStats(pokeData, type) : returns how many times a type appears in the pokeData data sample 4, Normal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = typeStats(dataSample4, 'Normal');\nconst expected = {\n  typeCount: 2,\n  typeName: 'Normal',\n  weaknessCount: 0\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "36daaa4b-0726-46f2-8f3e-692745ad7052",
              "parentUUID": "0afa0e4a-3714-408b-a69a-fc28d555ad99",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, Fighting",
              "fullTitle": "typeStats(pokeData, type) : returns how many times a type appears in the pokeData data sample 4, Fighting",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = typeStats(dataSample4, 'Fighting');\nconst expected = {\n  typeCount: 0,\n  typeName: 'Fighting',\n  weaknessCount: 3\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "35bf1094-e668-4d24-9090-9415204219c9",
              "parentUUID": "0afa0e4a-3714-408b-a69a-fc28d555ad99",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 5, Dragon",
              "fullTitle": "typeStats(pokeData, type) : returns how many times a type appears in the pokeData data sample 5, Dragon",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = typeStats(dataSample5, 'Dragon');\nconst expected = {\n  typeCount: 3,\n  typeName: 'Dragon',\n  weaknessCount: 3\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "a3379ef0-d1f1-4359-9774-0933c47fe425",
              "parentUUID": "0afa0e4a-3714-408b-a69a-fc28d555ad99",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 5, Fairy",
              "fullTitle": "typeStats(pokeData, type) : returns how many times a type appears in the pokeData data sample 5, Fairy",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = typeStats(dataSample5, 'Fairy');\nconst expected = {\n  typeCount: 0,\n  typeName: 'Fairy',\n  weaknessCount: 3\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "8c556548-11ba-4058-8d73-17182eb8fbf6",
              "parentUUID": "0afa0e4a-3714-408b-a69a-fc28d555ad99",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "342a60e5-5634-4bf9-8c7c-43d713c1afa7",
            "0d1d8869-47d5-4c46-b96e-fe50dfedf9d9",
            "36daaa4b-0726-46f2-8f3e-692745ad7052",
            "35bf1094-e668-4d24-9090-9415204219c9",
            "a3379ef0-d1f1-4359-9774-0933c47fe425",
            "8c556548-11ba-4058-8d73-17182eb8fbf6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "47164195-5014-4f02-b3f0-db6dc3ebdaa4",
          "title": "valuesForKey(pokeData, key) : returns all unique values stored in that key",
          "fullFile": "/home/hackyourfuture/Documents/pokedex-api/logic/values-for-key/spec.js",
          "file": "/logic/values-for-key/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 2, id",
              "fullTitle": "valuesForKey(pokeData, key) : returns all unique values stored in that key data sample 2, id",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = valuesForKey(dataSample2, 'id');\nconst expected = [43, 44, 45, 46, 47];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "7c463cfb-32aa-4418-aae8-feea288baa74",
              "parentUUID": "47164195-5014-4f02-b3f0-db6dc3ebdaa4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, name",
              "fullTitle": "valuesForKey(pokeData, key) : returns all unique values stored in that key data sample 2, name",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = valuesForKey(dataSample2, 'name');\nconst expected = [\n  'Oddish',\n  'Gloom',\n  'Vileplume',\n  'Paras',\n  'Parasect'\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "030f4dd7-3691-4142-b1eb-9f56dc06fe60",
              "parentUUID": "47164195-5014-4f02-b3f0-db6dc3ebdaa4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, num",
              "fullTitle": "valuesForKey(pokeData, key) : returns all unique values stored in that key data sample 3, num",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = valuesForKey(dataSample3, 'num');\nconst expected = ['083', '084', '085', '086', '087'];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "de7c8b24-15d0-4a25-b776-22f725c2d5bf",
              "parentUUID": "47164195-5014-4f02-b3f0-db6dc3ebdaa4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, multipliers",
              "fullTitle": "valuesForKey(pokeData, key) : returns all unique values stored in that key data sample 3, multipliers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = valuesForKey(dataSample3, 'multipliers');\nconst expected = [\n  null,\n  [2.19, 2.24],\n  [1.04, 1.96]\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "866248b8-2cc9-4e8b-9cc3-040b975698c7",
              "parentUUID": "47164195-5014-4f02-b3f0-db6dc3ebdaa4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, weaknesses",
              "fullTitle": "valuesForKey(pokeData, key) : returns all unique values stored in that key data sample 4, weaknesses",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const actual = valuesForKey(dataSample4, 'weaknesses');\nconst expected = [\n  ['Bug', 'Ghost', 'Dark'],\n  ['Fire', 'Electric', 'Ice', 'Flying', 'Rock'],\n  ['Fire', 'Bug', 'Rock', 'Ghost', 'Dark', 'Steel'],\n  ['Ground'],\n  ['Water', 'Ground', 'Rock'],\n  ['Fire', 'Flying', 'Rock'],\n  ['Fighting'],\n  ['Electric', 'Grass'],\n  ['Electric', 'Rock'],\n  ['Electric', 'Grass', 'Fighting', 'Rock'],\n  \n];\nassert.deepStrictEqual(actual, expected);",
              "err": {
                "message": "AssertionError: Expected values to be strictly deep-equal:\n+ actual - expected ... Lines skipped\n\n  [\n    [\n...\n      'Fighting',\n      'Rock'\n+   ],\n+   [\n+     'Fighting'\n    ]\n  ]",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly deep-equal:\n+ actual - expected ... Lines skipped\n\n  [\n    [\n...\n      'Fighting',\n      'Rock'\n+   ],\n+   [\n+     'Fighting'\n    ]\n  ]\n    at Context.<anonymous> (logic/values-for-key/spec.js:61:12)\n    at processImmediate (internal/timers.js:456:21)",
                "diff": "     \"Grass\"\n     \"Fighting\"\n     \"Rock\"\n   ]\n-   [\n-     \"Fighting\"\n-   ]\n ]\n"
              },
              "uuid": "6e27858b-faa6-450b-a405-22771371eaa2",
              "parentUUID": "47164195-5014-4f02-b3f0-db6dc3ebdaa4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, prev_evolution",
              "fullTitle": "valuesForKey(pokeData, key) : returns all unique values stored in that key data sample 4, prev_evolution",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = valuesForKey(dataSample4, 'prev_evolution');\nconst expected = [\n  [\n    { num: '129', name: 'Magikarp' }\n  ]\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "b7f1f796-f043-49d6-b285-66de980680af",
              "parentUUID": "47164195-5014-4f02-b3f0-db6dc3ebdaa4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 5, next_evolution",
              "fullTitle": "valuesForKey(pokeData, key) : returns all unique values stored in that key data sample 5, next_evolution",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = valuesForKey(dataSample5, 'next_evolution');\nconst expected = [\n  [\n    { num: '148', name: 'Dragonair' },\n    { num: '149', name: 'Dragonite' }\n  ],\n  [\n    { num: '149', name: 'Dragonite' }\n  ]\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "43df62cb-7e0d-4add-a2ba-b98b6ff67b5e",
              "parentUUID": "47164195-5014-4f02-b3f0-db6dc3ebdaa4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7c463cfb-32aa-4418-aae8-feea288baa74",
            "030f4dd7-3691-4142-b1eb-9f56dc06fe60",
            "de7c8b24-15d0-4a25-b776-22f725c2d5bf",
            "866248b8-2cc9-4e8b-9cc3-040b975698c7",
            "b7f1f796-f043-49d6-b285-66de980680af",
            "43df62cb-7e0d-4add-a2ba-b98b6ff67b5e"
          ],
          "failures": [
            "6e27858b-faa6-450b-a405-22771371eaa2"
          ],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}